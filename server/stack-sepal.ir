{:package "workflow-server", :definitions {"network/client-caches" ["defonce" "client-caches" ["atom" ["{}"]]], "network/handle-message" ["defn" "handle-message" ["op" "op-data" "state-id"] ["let" [["op-id" [".generate" "shortid"]] ["op-time" [".valueOf" ["js/Date."]]]] ["go" [">!" "server-chan" ["[]" "op" "op-data" "state-id" "op-id" "op-time"]]]]], "updater.core/updater" ["defn" "updater" ["db" "op" "op-data" "state-id" "op-id" "op-time"] ["case" "op" [":state/connect" ["state/connect" "db" "op-data" "state-id" "op-id" "op-time"]] [":state/disconnect" ["state/disconnect" "db" "op-data" "state-id" "op-id" "op-time"]] "db"]], "main/on-jsload" ["defn" "on-jsload" [] ["println" "|code updated."] ["render-clients!" "@reader-db-ref" "render-scene" "render-view"]], "main/-main" ["defn" "-main" [] ["nodejs/enable-util-print!"] ["let" [["server-ch" ["run-server!" ["{}" ":port" "5020"]]]] ["go-loop" ["[]"] ["let" [[["[]" "op" "op-data" "state-id" "op-id" "op-time"] ["<!" "server-ch"]]] ["--" "println" "|event" "@writer-db-ref" "op" "op-data" "state-id" "op-id" "op-time"] ["try" ["let" [["new-db" ["updater" "@writer-db-ref" "op" "op-data" "state-id" "op-id" "op-time"]]] ["reset!" "writer-db-ref" "new-db"]] ["catch" "js/Error" "e" [".log" "js/console" "e"]]] ["recur"]]] ["render-loop!"]] ["add-watch" "reader-db-ref" ":log" ["fn" []]] ["println" "|server started"]], "schema/database" ["def" "database" ["{}" [":states" ["{}"]] [":users" ["{}"]]]], "network/server-chan" ["defonce" "server-chan" ["chan"]], "view/render-view" ["defn" "render-view" ["state-id" "db"] ["{}" [":state" ["get-in" "db" ["[]" ":states" "state-id"]]] [":statistics" ["{}"]]]], "network/ws" ["def" "ws" ["js/require" "|ws"]], "schema/state" ["def" "state" ["{}" [":user-id" "nil"] [":id" "nil"] [":nickname" "nil"]]], "updater.state/disconnect" ["defn" "disconnect" ["db" "op-data" "state-id" "op-id" "op-time"] ["update" "db" ":states" ["fn" ["state"] ["dissoc" "state" "state-id"]]]], "network/render-clients!" ["defn" "render-clients!" ["db" "render-scene" "render-view"] ["doseq" ["[]" "state-entry" [":states" "db"]] ["let" [["state-id" ["first" "state-entry"]] ["scene" ["render-scene" "db"]] ["new-store" ["render-view" "state-id" "scene"]] ["old-store" ["or" ["get" "@client-caches" "state-id"] ["{}"]]] ["changes" ["diff" "old-store" "new-store"]] ["socket" ["get" "@socket-registry" "state-id"]]] ["if" ["and" ["not=" "changes" ["[]"]] ["some?" "socket"]] ["do" [".send" "socket" ["pr-str" "changes"]] ["swap!" "client-caches" "assoc" "state-id" "new-store"]]]]]], "main/writer-db-ref" ["defonce" "writer-db-ref" ["atom" "schema/database"]], "network/shortid" ["def" "shortid" ["js/require" "|shortid"]], "main/render-loop!" ["defn" "render-loop!" [] ["if" ["not=" "@reader-db-ref" "@writer-db-ref"] ["do" ["reset!" "reader-db-ref" "@writer-db-ref"] ["--" "println" "|render loop"] ["render-clients!" "@reader-db-ref" "render-scene" "render-view"]]] ["js/setTimeout" "render-loop!" "300"]], "network/socket-registry" ["defonce" "socket-registry" ["atom" ["{}"]]], "main/reader-db-ref" ["defonce" "reader-db-ref" ["atom" "@writer-db-ref"]], "network/run-server!" ["defn" "run-server!" ["configs"] ["let" [["wss" ["new" "WebSocketServer" ["js-obj" "|port" [":port" "configs"]]]]] [".on" "wss" "|connection" ["fn" ["socket"] ["let" [["state-id" [".generate" "shortid"]]] ["handle-message" ":state/connect" "nil" "state-id"] ["swap!" "socket-registry" "assoc" "state-id" "socket"] [".on" "socket" "|message" ["fn" ["rawData"] ["let" [["action" ["reader/read-string" "rawData"]] [["[]" "op" "op-data"] "action"]] ["handle-message" "op" "op-data" "state-id"]]]] [".on" "socket" "|close" ["fn" [] ["swap!" "socket-registry" "dissoc" "state-id"] ["handle-message" ":state/disconnect" "nil" "state-id"]]]]]]] "server-chan"], "network/WebSocketServer" ["def" "WebSocketServer" [".-Server" "ws"]], "view/render-scene" ["defn" "render-scene" ["db"] "db"], "updater.state/connect" ["defn" "connect" ["db" "op-data" "state-id" "op-id" "op-time"] ["assoc-in" "db" ["[]" ":states" "state-id"] ["merge" "schema/state" ["{}" [":id" "state-id"]]]]]}, :namespaces {"updater.state" ["ns" "workflow-server.updater.state" [":require" ["[]" "workflow-server.schema" ":as" "schema"]]], "schema" ["ns" "workflow-server.schema"], "main" ["ns" "workflow-server.main" [":require" ["[]" "cljs.nodejs" ":as" "nodejs"] ["[]" "workflow-server.schema" ":as" "schema"] ["[]" "workflow-server.network" ":refer" ["[]" "run-server!" "render-clients!"]] ["[]" "workflow-server.updater.core" ":refer" ["[]" "updater"]] ["[]" "workflow-server.view" ":refer" ["[]" "render-view" "render-scene"]] ["[]" "cljs.core.async" ":refer" ["[]" "<!"]]] [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go-loop"]]]], "updater.core" ["ns" "workflow-server.updater.core" [":require" ["[]" "workflow-server.updater.state" ":as" "state"]]], "view" ["ns" "workflow-server.view" [":require" ["[]" "workflow-server.schema" ":as" "schema"]]], "network" ["ns" "workflow-server.network" [":require" ["[]" "cljs.nodejs" ":as" "nodejs"] ["[]" "cljs.reader" ":as" "reader"] ["[]" "shallow-diff.diff" ":refer" ["[]" "diff"]] ["[]" "cljs.core.async" ":refer" ["[]" "chan" ">!"]]] [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go"]]]]}, :main-definition nil, :procedures {"updater.state" [], "schema" [], "main" [["set!" "*main-cli-fn*" "-main"]], "updater.core" [], "view" [], "network" []}}