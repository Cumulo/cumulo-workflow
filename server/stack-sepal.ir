{:definitions {"updater.core/updater" ["defn" "updater" ["db" "op" "op-data" "state-id" "op-id" "op-time"] ["case" "op" [":state/connect" ["state/connect" "db" "op-data" "state-id" "op-id" "op-time"]] [":state/disconnect" ["state/disconnect" "db" "op-data" "state-id" "op-id" "op-time"]] "db"]], "main/on-jsload" ["defn" "on-jsload" [] ["println" "|code updated."] ["render-clients!" "@reader-db-ref" "render-scene" "render-view"]], "main/-main" ["defn" "-main" [] ["nodejs/enable-util-print!"] ["let" [["server-ch" ["run-server!" ["{}" ":port" "5020"]]]] ["go-loop" ["[]"] ["let" [[["[]" "op" "op-data" "state-id" "op-id" "op-time"] ["<!" "server-ch"]]] ["--" "println" "|event" "@writer-db-ref" "op" "op-data" "state-id" "op-id" "op-time"] ["try" ["let" [["new-db" ["updater" "@writer-db-ref" "op" "op-data" "state-id" "op-id" "op-time"]]] ["reset!" "writer-db-ref" "new-db"]] ["catch" "js/Error" "e" [".log" "js/console" "e"]]] ["recur"]]] ["render-loop!"]] ["add-watch" "reader-db-ref" ":log" ["fn" []]] ["println" "|server started"]], "schema/database" ["def" "database" ["{}" [":states" ["{}"]] [":users" ["{}"]]]], "view/render-view" ["defn" "render-view" ["state-id" "db"] ["{}" [":state" ["get-in" "db" ["[]" ":states" "state-id"]]] [":statistics" ["{}"]]]], "schema/state" ["def" "state" ["{}" [":user-id" "nil"] [":id" "nil"] [":nickname" "nil"]]], "updater.state/disconnect" ["defn" "disconnect" ["db" "op-data" "state-id" "op-id" "op-time"] ["update" "db" ":states" ["fn" ["state"] ["dissoc" "state" "state-id"]]]], "main/writer-db-ref" ["defonce" "writer-db-ref" ["atom" "schema/database"]], "main/render-loop!" ["defn" "render-loop!" [] ["if" ["not=" "@reader-db-ref" "@writer-db-ref"] ["do" ["reset!" "reader-db-ref" "@writer-db-ref"] ["--" "println" "|render loop"] ["render-clients!" "@reader-db-ref" "render-scene" "render-view"]]] ["js/setTimeout" "render-loop!" "300"]], "main/reader-db-ref" ["defonce" "reader-db-ref" ["atom" "@writer-db-ref"]], "view/render-scene" ["defn" "render-scene" ["db"] "db"], "updater.state/connect" ["defn" "connect" ["db" "op-data" "state-id" "op-id" "op-time"] ["assoc-in" "db" ["[]" ":states" "state-id"] ["merge" "schema/state" ["{}" [":id" "state-id"]]]]]}, :namespaces {"main" ["ns" "workflow-server.main" [":require" ["[]" "cljs.nodejs" ":as" "nodejs"] ["[]" "workflow-server.schema" ":as" "schema"] ["[]" "cumulo-server.core" ":refer" ["[]" "run-server!" "render-clients!"]] ["[]" "workflow-server.updater.core" ":refer" ["[]" "updater"]] ["[]" "workflow-server.view" ":refer" ["[]" "render-view" "render-scene"]] ["[]" "cljs.core.async" ":refer" ["[]" "<!"]]] [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go-loop"]]]], "schema" ["ns" "workflow-server.schema"], "updater.core" ["ns" "workflow-server.updater.core" [":require" ["[]" "workflow-server.updater.state" ":as" "state"]]], "updater.state" ["ns" "workflow-server.updater.state" [":require" ["[]" "workflow-server.schema" ":as" "schema"]]], "view" ["ns" "workflow-server.view" [":require" ["[]" "workflow-server.schema" ":as" "schema"]]]}, :main-definition nil, :procedures {"main" [["set!" "*main-cli-fn*" "-main"]], "schema" [], "updater.core" [], "updater.state" [], "view" []}, :package "workflow-server"}