{:package "client",
 :files {"comp.container" {:ns ["ns"
                                "client.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo-ui.style.colors" ":as" "colors"]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                 ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                                 ["[]" "client.comp.header" ":refer" ["[]" "comp-header"]]
                                 ["[]" "client.comp.profile" ":refer" ["[]" "comp-profile"]]
                                 ["[]" "client.comp.login" ":refer" ["[]" "comp-login"]]
                                 ["[]" "respo-message.comp.msg-list" ":refer" ["[]" "comp-msg-list"]]]],
                           :defs {"render" ["defn"
                                            "render"
                                            ["store"]
                                            ["fn"
                                             ["state" "mutate!"]
                                             ["if"
                                              ["nil?" "store"]
                                              ["div"
                                               ["{}" [":style" ["merge" "ui/global" "ui/fullscreen" "ui/center"]]]
                                               ["comp-text" "|No connection!" "style-alert"]]
                                              ["div"
                                               ["{}" [":style" ["merge" "ui/global" "ui/fullscreen" "ui/column"]]]
                                               ["comp-header" [":logged-in?" "store"]]
                                               ["div"
                                                ["{}" [":style" "style-body"]]
                                                ["div"
                                                 ["{}" [":style" ["merge" "ui/row" "style-body"]]]
                                                 ["if"
                                                  [":logged-in?" "store"]
                                                  ["let"
                                                   [["router" [":router" "store"]]]
                                                   ["case"
                                                    [":name" "router"]
                                                    [":profile" ["comp-profile" [":user" "store"]]]
                                                    ["div"
                                                     ["{}"]
                                                     ["comp-text" ["str" "|404 page: " ["pr-str" "router"]] "nil"]]]]
                                                  ["comp-login"]]]]
                                               ["comp-debug" "store" "style-debugger"]
                                               ["comp-msg-list"
                                                ["get-in" "store" ["[]" ":session" ":notifications"]]
                                                ":session/remove-notification"]]]]],
                                  "style-alert" ["def"
                                                 "style-alert"
                                                 ["{}"
                                                  [":font-family" "|Josefin Sans"]
                                                  [":font-weight" "100"]
                                                  [":font-size" "40"]]],
                                  "comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]],
                                  "style-debugger" ["def"
                                                    "style-debugger"
                                                    ["{}" [":bottom" "0"] [":left" "0"] [":max-width" "|100%"]]],
                                  "style-body" ["def" "style-body" ["{}" [":padding" "|8px 16px"]]]},
                           :procs []},
         "network" {:ns ["ns"
                         "client.network"
                         [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go"]]]
                         [":require"
                          ["[]" "cljs.reader" ":as" "reader"]
                          ["[]" "cljs.core.async" ":as" "a" ":refer" ["[]" ">!" "<!" "chan" "timeout"]]
                          ["[]" "recollect.patch" ":refer" ["[]" "patch-bunch"]]]],
                    :defs {"sender" ["defonce" "sender" ["chan"]],
                           "send!" ["defn" "send!" ["op" "op-data"] ["go" [">!" "sender" ["[]" "op" "op-data"]]]],
                           "setup-socket!" ["defn"
                                            "setup-socket!"
                                            ["store-ref" "configs"]
                                            ["let"
                                             [["ws-url" [":url" "configs"]]
                                              ["ws" ["js/WebSocket." "ws-url"]]
                                              ["handle-close!"
                                               ["if"
                                                ["fn?" [":on-close!" "configs"]]
                                                [":on-close!" "configs"]
                                                "identity"]]
                                              ["handle-open!"
                                               ["if" ["fn?" [":on-open!" "configs"]] [":on-open!" "configs"] "identity"]]]
                                             ["set!" "ws.onopen" ["fn" ["event"] ["handle-open!" "event"]]]
                                             ["set!" "ws.onclose" ["fn" ["event"] ["handle-close!" "event"]]]
                                             ["set!"
                                              "ws.onmessage"
                                              ["fn"
                                               ["event"]
                                               ["let"
                                                [["changes" ["reader/read-string" "event.data"]]]
                                                ["println" "|Changes" "changes"]
                                                ["reset!" "store-ref" ["patch-bunch" "@store-ref" "changes"]]]]]
                                             ["go" ["loop" ["[]"] [".send" "ws" ["pr-str" ["<!" "sender"]]] ["recur"]]]]]},
                    :procs []},
         "comp.login" {:ns ["ns"
                            "client.comp.login"
                            [":require"
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input" "button"]]
                             ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                             ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "client.schema" ":as" "schema"]]],
                       :defs {"update-state" ["defn" "update-state" ["state" "k" "v"] ["assoc" "state" "k" "v"]],
                              "on-toggle" ["defn"
                                           "on-toggle"
                                           ["mutate!" "signup?"]
                                           ["fn" ["e" "dispatch!"] ["mutate!" ":signup?" ["not" "signup?"]]]],
                              "on-submit" ["defn"
                                           "on-submit"
                                           ["username" "password" "signup?"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["dispatch!"
                                             ["if" "signup?" ":user/sign-up" ":user/log-in"]
                                             ["[]" "username" "password"]]
                                            [".setItem"
                                             "js/localStorage"
                                             [":storage-key" "schema/configs"]
                                             ["[]" "username" "password"]]]],
                              "init-state" ["defn"
                                            "init-state"
                                            ["&" "args"]
                                            ["{}" [":signup?" "false"] [":username" "|"] [":password" "|"]]],
                              "on-input" ["defn"
                                          "on-input"
                                          ["mutate!" "k"]
                                          ["fn" ["e" "dispatch!"] ["mutate!" "k" [":value" "e"]]]],
                              "render" ["defn"
                                        "render"
                                        []
                                        ["fn"
                                         ["state" "mutate!"]
                                         ["div"
                                          ["{}" [":style" ["merge" "ui/flex" "ui/column"]]]
                                          ["div"
                                           ["{}"]
                                           ["comp-text" ["if" [":signup?" "state"] "|Sign up" "|Log in"] "style-title"]
                                           ["if"
                                            [":signup?" "state"]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|Want to log in?" "nil"]
                                             ["comp-space" "8" "nil"]
                                             ["div"
                                              ["{}"
                                               [":style" "ui/clickable-text"]
                                               [":event" ["{}" [":click" ["on-toggle" "mutate!" [":signup?" "state"]]]]]]
                                              ["comp-text" "|Log in" "nil"]]]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|No account yet?" "nil"]
                                             ["comp-space" "8" "nil"]
                                             ["div"
                                              ["{}"
                                               [":style" "ui/clickable-text"]
                                               [":event" ["{}" [":click" ["on-toggle" "mutate!" [":signup?" "state"]]]]]]
                                              ["comp-text" "|Sign up" "nil"]]]]]
                                          ["div"
                                           ["{}" [":style" ["{}"]]]
                                           ["div"
                                            ["{}"]
                                            ["input"
                                             ["{}"
                                              [":style" "ui/input"]
                                              [":attrs"
                                               ["{}" [":placeholder" "|Username"] [":value" [":username" "state"]]]]
                                              [":event" ["{}" [":input" ["on-input" "mutate!" ":username"]]]]]]]
                                           ["comp-space" "nil" "8"]
                                           ["div"
                                            ["{}"]
                                            ["input"
                                             ["{}"
                                              [":style" "ui/input"]
                                              [":attrs"
                                               ["{}" [":placeholder" "|Password"] [":value" [":password" "state"]]]]
                                              [":event" ["{}" [":input" ["on-input" "mutate!" ":password"]]]]]]]]
                                          ["comp-space" "nil" "8"]
                                          ["div"
                                           ["{}" [":style" "ui/flex"]]
                                           ["button"
                                            ["{}"
                                             [":style"
                                              ["merge" "ui/button" ["{}" [":outline" ":none"] [":border" ":none"]]]]
                                             [":event"
                                              ["{}"
                                               [":click"
                                                ["on-submit"
                                                 [":username" "state"]
                                                 [":password" "state"]
                                                 [":signup?" "state"]]]]]]
                                            ["comp-text" "|Submit" "nil"]]]
                                          ["--" "comp-debug" "state" "nil"]]]],
                              "comp-login" ["def"
                                            "comp-login"
                                            ["create-comp" ":login" "init-state" "update-state" "render"]],
                              "style-title" ["def"
                                             "style-title"
                                             ["{}"
                                              [":font-size" "24"]
                                              [":font-weight" "300"]
                                              [":font-family" "|Josefin Sans"]]]},
                       :procs []},
         "comp.profile" {:ns ["ns"
                              "client.comp.profile"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "client.schema" ":as" "schema"]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "a"]]
                               ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                         :defs {"on-log-out" ["defn"
                                              "on-log-out"
                                              ["e" "dispatch!"]
                                              ["dispatch!" ":user/log-out" "nil"]
                                              [".removeItem" "js/localStorage" [":storage-key" "schema/configs"]]],
                                "comp-profile" ["def" "comp-profile" ["create-comp" ":profile" "render"]],
                                "style-trigger" ["def"
                                                 "style-trigger"
                                                 ["{}"
                                                  [":font-size" "14"]
                                                  [":cursor" ":pointer"]
                                                  [":background-color" "colors/motif-light"]
                                                  [":color" ":white"]
                                                  [":padding" "|0 8px"]]],
                                "render" ["defn"
                                          "render"
                                          ["user"]
                                          ["fn"
                                           ["state" "mutate!"]
                                           ["div"
                                            ["{}" [":style" "ui/flex"]]
                                            ["comp-text" ["str" "|Hello! " [":name" "user"]] "nil"]
                                            ["comp-space" "8" "nil"]
                                            ["a"
                                             ["{}" [":style" "style-trigger"] [":event" ["{}" [":click" "on-log-out"]]]]
                                             ["comp-text" "|Log out" "nil"]]]]]},
                         :procs []},
         "comp.header" {:ns ["ns"
                             "client.comp.header"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                        :defs {"on-profile" ["defn"
                                             "on-profile"
                                             ["e" "dispatch!"]
                                             ["dispatch!"
                                              ":router/change"
                                              ["{}" [":name" ":profile"] [":params" "nil"] [":router" "nil"]]]],
                               "style-logo" ["def" "style-logo" ["{}" [":cursor" ":pointer"]]],
                               "render" ["defn"
                                         "render"
                                         ["logged-in?"]
                                         ["fn"
                                          ["state" "mutate!"]
                                          ["div"
                                           ["{}" [":style" ["merge" "ui/row-center" "style-header"]]]
                                           ["div"
                                            ["{}" [":event" ["{}" [":click" "on-home"]]] [":style" "style-logo"]]
                                            ["comp-text" "|Workflow" "nil"]]
                                           ["div"
                                            ["{}" [":style" "style-pointer"] [":event" ["{}" [":click" "on-profile"]]]]
                                            ["comp-text" ["if" "logged-in?" "|Me" "|Guest"] "nil"]]]]],
                               "comp-header" ["def" "comp-header" ["create-comp" ":header" "render"]],
                               "style-pointer" ["def" "style-pointer" ["{}" [":cursor" "|pointer"]]],
                               "style-header" ["def"
                                               "style-header"
                                               ["{}"
                                                [":height" "48"]
                                                [":background-color" "colors/motif"]
                                                [":justify-content" ":space-between"]
                                                [":padding" "|0 16px"]
                                                [":font-size" "16"]
                                                [":color" ":white"]]],
                               "on-home" ["defn"
                                          "on-home"
                                          ["e" "dispatch!"]
                                          ["dispatch!"
                                           ":router/change"
                                           ["{}" [":name" ":home"] [":params" "nil"] [":router" "nil"]]]]},
                        :procs []},
         "main" {:ns ["ns"
                      "client.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!"]]
                       ["[]" "client.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "client.network" ":refer" ["[]" "send!" "setup-socket!"]]
                       ["[]" "client.schema" ":as" "schema"]]],
                 :defs {"dispatch!" ["defn" "dispatch!" ["op" "op-data"] ["send!" "op" "op-data"]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["let"
                                        [["target" [".querySelector" "js/document" "|#app"]]]
                                        ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]],
                        "-main" ["defn"
                                 "-main"
                                 []
                                 ["enable-console-print!"]
                                 ["render-app!"]
                                 ["setup-socket!"
                                  "store-ref"
                                  ["{}"
                                   [":url"
                                    ["str" "|ws://" [".-hostname" "js/location"] "|:" [":port" "schema/configs"]]]
                                   [":on-close!"
                                    ["fn"
                                     ["event"]
                                     ["reset!" "store-ref" "nil"]
                                     [".error" "js/console" "|Lost connection!"]]]
                                   [":on-open!" ["fn" ["event"] ["simulate-login!"]]]]]
                                 ["add-watch" "store-ref" ":changes" "render-app!"]
                                 ["add-watch" "states-ref" ":changes" "render-app!"]
                                 ["println" "|App started!"]],
                        "store-ref" ["defonce" "store-ref" ["atom" "nil"]],
                        "simulate-login!" ["defn"
                                           "simulate-login!"
                                           []
                                           ["let"
                                            [["raw" [".getItem" "js/localStorage" [":storage-key" "schema/configs"]]]]
                                            ["if"
                                             ["some?" "raw"]
                                             ["do"
                                              ["println" "|Found storage."]
                                              ["dispatch!" ":user/log-in" ["read-string" "raw"]]]
                                             ["do" ["println" "|Found no storage."]]]]],
                        "states-ref" ["defonce" "states-ref" ["atom" ["{}"]]]},
                 :procs [["set!" "js/window.onload" "-main"]]},
         "schema" {:ns ["ns" "client.schema"],
                   :defs {"configs" ["def" "configs" ["{}" [":storage-key" "|workflow-storage"] [":port" "5021"]]]},
                   :procs []}}}
