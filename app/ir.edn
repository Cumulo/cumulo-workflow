{:package "app",
 :files {"comp.container" {:ns ["ns"
                                "app.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo-ui.style.colors" ":as" "colors"]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                 ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                                 ["[]" "app.comp.header" ":refer" ["[]" "comp-header"]]
                                 ["[]" "app.comp.profile" ":refer" ["[]" "comp-profile"]]
                                 ["[]" "app.comp.login" ":refer" ["[]" "comp-login"]]
                                 ["[]" "respo-message.comp.msg-list" ":refer" ["[]" "comp-msg-list"]]]],
                           :defs {"style-alert" ["def"
                                                 "style-alert"
                                                 ["{}"
                                                  [":font-family" "|Josefin Sans"]
                                                  [":font-weight" "100"]
                                                  [":font-size" "40"]]],
                                  "comp-container" ["def"
                                                    "comp-container"
                                                    ["create-comp"
                                                     ":container"
                                                     ["fn"
                                                      ["store"]
                                                      ["fn"
                                                       ["cursor"]
                                                       ["let"
                                                        [["states" [":states" "store"]]]
                                                        ["if"
                                                         ["nil?" "store"]
                                                         ["div"
                                                          ["{}"
                                                           [":style" ["merge" "ui/global" "ui/fullscreen" "ui/center"]]]
                                                          ["comp-text" "|No connection!" "style-alert"]]
                                                         ["div"
                                                          ["{}"
                                                           [":style" ["merge" "ui/global" "ui/fullscreen" "ui/column"]]]
                                                          ["comp-header" [":logged-in?" "store"]]
                                                          ["div"
                                                           ["{}" [":style" "style-body"]]
                                                           ["div"
                                                            ["{}" [":style" ["merge" "ui/row" "style-body"]]]
                                                            ["if"
                                                             [":logged-in?" "store"]
                                                             ["let"
                                                              [["router" [":router" "store"]]]
                                                              ["case"
                                                               [":name" "router"]
                                                               [":profile" ["comp-profile" [":user" "store"]]]
                                                               ["div"
                                                                ["{}"]
                                                                ["comp-text"
                                                                 ["str" "|404 page: " ["pr-str" "router"]]
                                                                 "nil"]]]]
                                                             ["comp-login" "states"]]]]
                                                          ["comp-debug" "store" "style-debugger"]
                                                          ["comp-msg-list"
                                                           ["get-in" "store" ["[]" ":session" ":notifications"]]
                                                           ":session/remove-notification"]]]]]]]],
                                  "style-debugger" ["def"
                                                    "style-debugger"
                                                    ["{}" [":bottom" "0"] [":left" "0"] [":max-width" "|100%"]]],
                                  "style-body" ["def" "style-body" ["{}" [":padding" "|8px 16px"]]]},
                           :procs []},
         "network" {:ns ["ns"
                         "app.network"
                         [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go"]]]
                         [":require"
                          ["[]" "cljs.reader" ":as" "reader"]
                          ["[]" "cljs.core.async" ":as" "a" ":refer" ["[]" ">!" "<!" "chan" "timeout"]]
                          ["[]" "recollect.patch" ":refer" ["[]" "patch-bunch"]]]],
                    :defs {"sender" ["defonce" "sender" ["chan"]],
                           "send!" ["defn" "send!" ["op" "op-data"] ["go" [">!" "sender" ["[]" "op" "op-data"]]]],
                           "setup-socket!" ["defn"
                                            "setup-socket!"
                                            ["ref-store" "configs"]
                                            ["let"
                                             [["ws-url" [":url" "configs"]]
                                              ["ws" ["js/WebSocket." "ws-url"]]
                                              ["handle-close!"
                                               ["if"
                                                ["fn?" [":on-close!" "configs"]]
                                                [":on-close!" "configs"]
                                                "identity"]]
                                              ["handle-open!"
                                               ["if" ["fn?" [":on-open!" "configs"]] [":on-open!" "configs"] "identity"]]]
                                             ["set!" "ws.onopen" ["fn" ["event"] ["handle-open!" "event"]]]
                                             ["set!" "ws.onclose" ["fn" ["event"] ["handle-close!" "event"]]]
                                             ["set!"
                                              "ws.onmessage"
                                              ["fn"
                                               ["event"]
                                               ["let"
                                                [["changes" ["reader/read-string" "event.data"]]]
                                                ["println" "|Changes" "changes"]
                                                ["reset!" "ref-store" ["patch-bunch" "@ref-store" "changes"]]]]]
                                             ["go" ["loop" ["[]"] [".send" "ws" ["pr-str" ["<!" "sender"]]] ["recur"]]]]]},
                    :procs []},
         "comp.login" {:ns ["ns"
                            "app.comp.login"
                            [":require"
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input" "button"]]
                             ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                             ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "app.schema" ":as" "schema"]]],
                       :defs {"on-toggle" ["defn"
                                           "on-toggle"
                                           ["cursor" "state"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["dispatch!" ":states" ["[]" "cursor" ["update" "state" ":signup?" "not"]]]]],
                              "on-submit" ["defn"
                                           "on-submit"
                                           ["username" "password" "signup?"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["dispatch!"
                                             ["if" "signup?" ":user/sign-up" ":user/log-in"]
                                             ["[]" "username" "password"]]
                                            [".setItem"
                                             "js/localStorage"
                                             [":storage-key" "schema/configs"]
                                             ["[]" "username" "password"]]]],
                              "on-input" ["defn"
                                          "on-input"
                                          ["cursor" "state" "k"]
                                          ["fn"
                                           ["e" "dispatch!"]
                                           ["dispatch!" ":states" ["[]" "cursor" ["assoc" "state" "k" [":value" "1"]]]]]],
                              "comp-login" ["def"
                                            "comp-login"
                                            ["create-comp"
                                             ":login"
                                             ["fn"
                                              ["states"]
                                              ["fn"
                                               ["cursor"]
                                               ["let"
                                                [["state" ["or" [":data" "states"] "initial-state"]]]
                                                ["div"
                                                 ["{}" [":style" ["merge" "ui/flex" "ui/column"]]]
                                                 ["div"
                                                  ["{}"]
                                                  ["comp-text"
                                                   ["if" [":signup?" "state"] "|Sign up" "|Log in"]
                                                   "style-title"]
                                                  ["if"
                                                   [":signup?" "state"]
                                                   ["div"
                                                    ["{}"]
                                                    ["comp-text" "|Want to log in?" "nil"]
                                                    ["comp-space" "8" "nil"]
                                                    ["div"
                                                     ["{}"
                                                      [":style" "ui/clickable-text"]
                                                      [":event" ["{}" [":click" ["on-toggle" "cursor" "state"]]]]]
                                                     ["comp-text" "|Log in" "nil"]]]
                                                   ["div"
                                                    ["{}"]
                                                    ["comp-text" "|No account yet?" "nil"]
                                                    ["comp-space" "8" "nil"]
                                                    ["div"
                                                     ["{}"
                                                      [":style" "ui/clickable-text"]
                                                      [":event" ["{}" [":click" ["on-toggle" "cursor" "state"]]]]]
                                                     ["comp-text" "|Sign up" "nil"]]]]]
                                                 ["div"
                                                  ["{}" [":style" ["{}"]]]
                                                  ["div"
                                                   ["{}"]
                                                   ["input"
                                                    ["{}"
                                                     [":style" "ui/input"]
                                                     [":attrs"
                                                      ["{}"
                                                       [":placeholder" "|Username"]
                                                       [":value" [":username" "state"]]]]
                                                     [":event"
                                                      ["{}" [":input" ["on-input" "cursor" "state" ":username"]]]]]]]
                                                  ["comp-space" "nil" "8"]
                                                  ["div"
                                                   ["{}"]
                                                   ["input"
                                                    ["{}"
                                                     [":style" "ui/input"]
                                                     [":attrs"
                                                      ["{}"
                                                       [":placeholder" "|Password"]
                                                       [":value" [":password" "state"]]]]
                                                     [":event"
                                                      ["{}" [":input" ["on-input" "cursor" "state" ":password"]]]]]]]]
                                                 ["comp-space" "nil" "8"]
                                                 ["div"
                                                  ["{}" [":style" "ui/flex"]]
                                                  ["button"
                                                   ["{}"
                                                    [":style"
                                                     ["merge"
                                                      "ui/button"
                                                      ["{}" [":outline" ":none"] [":border" ":none"]]]]
                                                    [":event"
                                                     ["{}"
                                                      [":click"
                                                       ["on-submit"
                                                        [":username" "state"]
                                                        [":password" "state"]
                                                        [":signup?" "state"]]]]]]
                                                   ["comp-text" "|Submit" "nil"]]]
                                                 ["--" "comp-debug" "state" "nil"]]]]]]],
                              "style-title" ["def"
                                             "style-title"
                                             ["{}"
                                              [":font-size" "24"]
                                              [":font-weight" "300"]
                                              [":font-family" "|Josefin Sans"]]],
                              "initial-state" ["def"
                                               "initial-state"
                                               ["{}" [":signup?" "false"] [":username" "|"] [":password" "|"]]]},
                       :procs []},
         "comp.profile" {:ns ["ns"
                              "app.comp.profile"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "app.schema" ":as" "schema"]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "a"]]
                               ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                         :defs {"on-log-out" ["defn"
                                              "on-log-out"
                                              ["e" "dispatch!"]
                                              ["dispatch!" ":user/log-out" "nil"]
                                              [".removeItem" "js/localStorage" [":storage-key" "schema/configs"]]],
                                "comp-profile" ["def"
                                                "comp-profile"
                                                ["create-comp"
                                                 ":profile"
                                                 ["fn"
                                                  ["user"]
                                                  ["fn"
                                                   ["cursor"]
                                                   ["div"
                                                    ["{}" [":style" "ui/flex"]]
                                                    ["comp-text" ["str" "|Hello! " [":name" "user"]] "nil"]
                                                    ["comp-space" "8" "nil"]
                                                    ["a"
                                                     ["{}"
                                                      [":style" "style-trigger"]
                                                      [":event" ["{}" [":click" "on-log-out"]]]]
                                                     ["comp-text" "|Log out" "nil"]]]]]]],
                                "style-trigger" ["def"
                                                 "style-trigger"
                                                 ["{}"
                                                  [":font-size" "14"]
                                                  [":cursor" ":pointer"]
                                                  [":background-color" "colors/motif-light"]
                                                  [":color" ":white"]
                                                  [":padding" "|0 8px"]]]},
                         :procs []},
         "comp.header" {:ns ["ns"
                             "app.comp.header"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                        :defs {"on-profile" ["defn"
                                             "on-profile"
                                             ["e" "dispatch!"]
                                             ["dispatch!"
                                              ":router/change"
                                              ["{}" [":name" ":profile"] [":params" "nil"] [":router" "nil"]]]],
                               "style-logo" ["def" "style-logo" ["{}" [":cursor" ":pointer"]]],
                               "comp-header" ["def"
                                              "comp-header"
                                              ["create-comp"
                                               ":header"
                                               ["fn"
                                                ["logged-in?"]
                                                ["fn"
                                                 ["cursor"]
                                                 ["div"
                                                  ["{}" [":style" ["merge" "ui/row-center" "style-header"]]]
                                                  ["div"
                                                   ["{}" [":event" ["{}" [":click" "on-home"]]] [":style" "style-logo"]]
                                                   ["comp-text" "|Workflow" "nil"]]
                                                  ["div"
                                                   ["{}"
                                                    [":style" "style-pointer"]
                                                    [":event" ["{}" [":click" "on-profile"]]]]
                                                   ["comp-text" ["if" "logged-in?" "|Me" "|Guest"] "nil"]]]]]]],
                               "style-pointer" ["def" "style-pointer" ["{}" [":cursor" "|pointer"]]],
                               "style-header" ["def"
                                               "style-header"
                                               ["{}"
                                                [":height" "48"]
                                                [":background-color" "colors/motif"]
                                                [":justify-content" ":space-between"]
                                                [":padding" "|0 16px"]
                                                [":font-size" "16"]
                                                [":color" ":white"]]],
                               "on-home" ["defn"
                                          "on-home"
                                          ["e" "dispatch!"]
                                          ["dispatch!"
                                           ":router/change"
                                           ["{}" [":name" ":home"] [":params" "nil"] [":router" "nil"]]]]},
                        :procs []},
         "main" {:ns ["ns"
                      "app.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element"]]
                       ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]
                       ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "app.network" ":refer" ["[]" "send!" "setup-socket!"]]
                       ["[]" "app.schema" ":as" "schema"]]],
                 :defs {"dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["cond"
                                      [["=" "op" ":states"]
                                       ["let"
                                        [["new-store" ["update" "@ref-store" ":states" ["mutate" "op-data"]]]]
                                        ["reset!" "ref-store" "new-store"]]]
                                      [":else" ["send!" "op" "op-data"]]]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|Code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["println" "|Calling render-app!"]
                                       ["render!" ["comp-container" "@ref-store"] "mount-target" "dispatch!"]],
                        "-main" ["defn"
                                 "-main"
                                 []
                                 ["enable-console-print!"]
                                 ["println" "|Loaded"]
                                 ["if"
                                  "server-rendered?"
                                  ["falsify-stage!"
                                   "mount-target"
                                   ["render-element" ["comp-container" "@ref-store"]]
                                   "dispatch!"]]
                                 ["render-app!"]
                                 ["setup-socket!"
                                  "ref-store"
                                  ["{}"
                                   [":url"
                                    ["str" "|ws://" [".-hostname" "js/location"] "|:" [":port" "schema/configs"]]]
                                   [":on-close!"
                                    ["fn"
                                     ["event"]
                                     ["reset!" "ref-store" "nil"]
                                     [".error" "js/console" "|Lost connection!"]]]
                                   [":on-open!" ["fn" ["event"] ["simulate-login!"]]]]]
                                 ["add-watch" "ref-store" ":changes" "render-app!"]
                                 ["println" "|App started!"]],
                        "ref-store" ["defonce" "ref-store" ["atom" "nil"]],
                        "simulate-login!" ["defn"
                                           "simulate-login!"
                                           []
                                           ["let"
                                            [["raw" [".getItem" "js/localStorage" [":storage-key" "schema/configs"]]]]
                                            ["if"
                                             ["some?" "raw"]
                                             ["do"
                                              ["println" "|Found storage."]
                                              ["dispatch!" ":user/log-in" ["read-string" "raw"]]]
                                             ["do" ["println" "|Found no storage."]]]]],
                        "server-rendered?" ["def"
                                            "server-rendered?"
                                            ["some?" [".querySelector" "js/document" "|meta#server-rendered"]]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|#app"]]},
                 :procs [["set!" "js/window.onload" "-main"]]},
         "render" {:ns ["ns"
                        "app.render"
                        [":require"
                         ["[]"
                          "respo.alias"
                          ":refer"
                          ["[]" "html" "head" "title" "script" "style" "meta'" "div" "link" "body"]]
                         ["[]" "respo.render.html" ":refer" ["[]" "make-html" "make-string"]]
                         ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                         ["[]" "|fs" ":refer" ["[]" "readFileSync" "writeFileSync"]]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["spit"
                                    "|dist/index.html"
                                    ["if" ["=" "js/process.env.env" "|dev"] ["generate-empty-html"] ["generate-html"]]]],
                          "spit" ["defn"
                                  "spit"
                                  ["file-name" "content"]
                                  ["writeFileSync" "file-name" "content"]
                                  ["println" "|Wrote to:" "file-name"]],
                          "generate-empty-html" ["defn"
                                                 "generate-empty-html"
                                                 []
                                                 ["html-dsl" ["{}" [":build?" "false"] [":main" "|/main.js"]] "|"]],
                          "generate-html" ["defn"
                                           "generate-html"
                                           []
                                           ["let"
                                            [["tree" ["comp-container" ["{}"]]]
                                             ["html-content" ["make-string" "tree"]]
                                             ["resources"
                                              ["let"
                                               [["manifest" ["js/JSON.parse" ["slurp" "|dist/manifest.json"]]]]
                                               ["{}"
                                                [":build?" "true"]
                                                [":css" ["aget" "manifest" "|main.css"]]
                                                [":main" ["aget" "manifest" "|main.js"]]
                                                [":vendor" ["aget" "manifest" "|vendor.js"]]]]]]
                                            ["html-dsl" "resources" "html-content"]]],
                          "slurp" ["defn" "slurp" ["x"] ["readFileSync" "x" "|utf8"]],
                          "html-dsl" ["defn"
                                      "html-dsl"
                                      ["resources" "html-content"]
                                      ["make-html"
                                       ["html"
                                        ["{}"]
                                        ["head"
                                         ["{}"]
                                         ["title" ["{}" [":innerHTML" "|Stack Workflow"]]]
                                         ["link" ["{}" [":rel" "|icon"] [":type" "|image/png"] [":href" "icon-url"]]]
                                         ["link" ["{}" [":rel" "|manifest"] [":href" "|manifest.json"]]]
                                         ["meta'" ["{}" [":charset" "|utf8"]]]
                                         ["meta'"
                                          ["{}"
                                           [":name" "|viewport"]
                                           [":content" "|width=device-width, initial-scale=1"]]]
                                         ["if"
                                          [":build?" "resources"]
                                          ["meta'" ["{}" [":id" "|server-rendered"] [":type" "|text/edn"]]]]
                                         ["if"
                                          ["contains?" "resources" ":css"]
                                          ["link"
                                           ["{}"
                                            [":rel" "|stylesheet"]
                                            [":type" "|text/css"]
                                            [":href" [":css" "resources"]]]]]]
                                        ["body"
                                         ["{}"]
                                         ["div" ["{}" [":id" "|app"] [":innerHTML" "html-content"]]]
                                         ["if"
                                          [":build?" "resources"]
                                          ["script" ["{}" [":src" [":vendor" "resources"]]]]]
                                         ["script" ["{}" [":src" [":main" "resources"]]]]]]]],
                          "icon-url" ["def" "icon-url" "|http://logo.mvc-works.org/mvc.png"]},
                   :procs [["main!"]]},
         "schema" {:ns ["ns" "app.schema"],
                   :defs {"configs" ["def" "configs" ["{}" [":storage-key" "|workflow-storage"] [":port" "5021"]]]},
                   :procs []}}}
